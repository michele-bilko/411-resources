{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red247\green249\blue255;\red26\green26\blue26;
}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c97375\c98161\c100000;\cssrgb\c13333\c13333\c13333;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa274\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
GiggleGit:\
Theme:\cf2 \
\cf2 Get GiggleGit demo into a stable enough alpha to start onboarding some adventurous clients.\
Epic:\cf2 \
\cf2 Onboarding experience.\
User Story 1: As a vanilla git power-user that has never seen GiggleGit before, I want to understand how GiggleGit is different from vanilla git so I can see if I should use it instead.\
Task: Educate first time users about GiggleGit\'92s unique features.\
Ticket 1: Create an interactive tutorial for GiggleGit.\
Details: Develop a tutorial that is accessible from the onboarding page that provides users with a step by step interactive tutorial that showcases GiggleGit\'92s \'93meme based merge conflict resolution\'94 features.\
Ticket 2: Create a comparison guide between Git and GiggleGit\
Details: Create a guide showing and explaining the differences between vanilla Git and GiggleGit while highlighting unique features found in GiggleGitl\
\
User Story 2: As a team lead onboarding an experienced GiggleGit user, I want to integrate GiggleGit into my team\'92s workflow without friction.\
Task: Simplify team based onboarding for GiggleGit.\
Ticket 1: Create team-based project sharing\
Details: Allow team leads to make shared projects that allow for collaboration using GiggleGit and ensure that permissions are modifiable such as read-only and write access.\
Ticket 2: Add team specific documentation\
Details: Create a guide for team leaders about onboarding teams and showcase GiggleGit\'92s usage in a collaborative environment.\
User story 3: As a new user I want to use GiggleGit securely on a new machine and without delays in authentication.\
Task: Implement fast and secure authentication\
Ticket 1: Add OAuth authentication\
Details: Integrate OAuth using Google or Github to allow users to authenticate securely on new machines with accounts they are used to using.\
Ticket 2: Implement 2FA\
Details: Add optional FA support using a phone number or email to enhance security for authentication for users concerned with security.\
\'93
\f1\fs30 \cf4 As a user I want to be able to authenticate on a new machine 
\f0\fs32 \cf2 \'94 Is not a user story because it has no context or defined goal. It does not explain who the user is, what they want, or why they want it, therefore it is not a user story- it is more similar to an epic.\
SnickerSync:\
Goal: Create a tool called SnickerSync that integrates seamlessly with GiggleGit to provide a delightful user experience during merges.\
Non-Goal: Develop an AI powered meme generator for merge conflicts.\
Non-Functional Requirement 1: Security\
Functional Requirement 1: Ensure all API calls between SnickerSync and GiggleGit are encrypted with HTTPS to create secure API access.\
Functional Requirement 2: Protect user data with role based access control to make sure only authorized users have access to sensitive data.\
Non-Functional Requirement 2: Usability\
Functional Requirement 3: Create an intuitive interface that indicates how the user can \'93sync with a snicker\'94 during merges\
Functional Requirement 4: Ensure SnickerSync is accessible to users with disabilities including visual and audio.\
}